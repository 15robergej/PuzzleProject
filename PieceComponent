import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;


public class PieceComponent extends JComponent implements MouseListener, MouseMotionListener{
	
	private static BufferedImage image;
	private int x;
	private int y;
//	private int width = image.getWidth();
//	private int height = image.getHeight();
//	private boolean dragging = false;
	private Piece piece;
	
	
	public static BufferedImage getImage() {
		return image;
	}
	public static void setImage(BufferedImage image) {
		PieceComponent.image = image;
	}
	public int getWidth() {
		return image.getWidth();
	}
	public int getHeight() {
		return image.getHeight();
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
//	public boolean getDrag(){
//		return dragging;
//	}
	

	//ctor
	public PieceComponent(int north, int east, int south, int west, BufferedImage image, int x, int y){
		this.piece= new Piece(north, east, south, west);
		setImage(image);
		this.x = x;
		this.y = y;
	}
	
	
	//rotates once 90 degrees, clockwise
	public void rotate(){
		piece.rotate();
		AffineTransform at = new AffineTransform();
		at.rotate(Math.PI/2, image.getWidth() / 2, image.getHeight() / 2);
		AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
		image = op.filter(image, null);
		image.createGraphics().drawImage(image, 0, 0, null);
		
	}

	

	@Override
	public void mouseMoved(MouseEvent e) {

	}

	@Override
	public void mouseClicked(MouseEvent e) {
		Point clicked = e.getPoint();
		
		Rectangle bounds = new Rectangle(x, y, getWidth(), getHeight());
		
		if(bounds.contains(clicked)){
			rotate();
			
			this.repaint();
		}

	}


	@Override
	public void mousePressed(MouseEvent e) {
//		Point pressed = e.getPoint();
//		
//		Rectangle bounds = new Rectangle(x, y, getWidth(), getHeight());
//		
//		if (bounds.contains(pressed)){
//			dragging = true;
//		}
	}

	@Override
	public void mouseDragged(MouseEvent e) {
//		Point drag = e.getPoint();
//		if(dragging){
//			x = drag.x;
//			y = drag.y;
//		}
	}
	
	@Override
	public void mouseReleased(MouseEvent e) {
//		Point released = e.getPoint();
//		dragging = false;

	}

	@Override
	public void mouseEntered(MouseEvent e) {

	}

	@Override
	public void mouseExited(MouseEvent e) {

	}


}
