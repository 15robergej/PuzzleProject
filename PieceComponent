
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;


public class PieceComponent extends Piece implements MouseListener, MouseMotionListener{
	
	private static BufferedImage image;
	private int x;
	private int y;
	private int width = image.getWidth();
	private int height = image.getHeight();
	private boolean dragging = false;
	private static Piece piece;
	
	
	public static BufferedImage getImage() {
		return image;
	}



	public static void setImage(BufferedImage image) {
		PieceComponent.image = image;
	}



	public int getWidth() {
		return width;
	}



	public void setWidth(int width) {
		this.width = width;
	}



	public int getHeight() {
		return height;
	}



	public void setHeight(int height) {
		this.height = height;
	}



	public int getX() {
		return x;
	}



	public void setX(int x) {
		this.x = x;
	}



	public int getY() {
		return y;
	}



	public void setY(int y) {
		this.y = y;
	}



	public PieceComponent(int north, int east, int south, int west, BufferedImage image, int x, int y){
		super(north, east, south, west);
		this.image = image;
		this.x = x;
		this.y = y;
	}
	
		

	public static void rotate(int rotations){
		piece.rotate(rotations);
		AffineTransform at = new AffineTransform();
		at.rotate(Math.PI/2, image.getWidth() / 2, image.getHeight() / 2);
		AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
		image = op.filter(image, null);
		image.createGraphics().drawImage(image, 0, 0, null);
	}

	

	@Override
	public void mouseMoved(MouseEvent e) {

	}

	@Override
	public void mouseClicked(MouseEvent e) {
		Point clicked = e.getPoint();
		
		Rectangle bounds = new Rectangle(x, y, width, height);
		
		if(bounds.contains(clicked)){
			
//			this.repaint();
		}


	}


	@Override
	public void mousePressed(MouseEvent e) {
		Point pressed = e.getPoint();
		
		Rectangle bounds = new Rectangle(x, y, width, height);
		
		if (bounds.contains(pressed)){
			dragging = true;
		}
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		Point drag = e.getPoint();
		if(dragging){
			x = drag.x;
			y = drag.y;
		}
	}
	
	@Override
	public void mouseReleased(MouseEvent e) {
		Point released = e.getPoint();
		dragging = false;
//		Rectangle g1 = new Rectangle(426, 126, 70, 70);
//		Rectangle g2 = new Rectangle(426, 196, 70, 70);
//		Rectangle g3 = new Rectangle(426, 266, 70, 70);
//		Rectangle g4 = new Rectangle(496, 126, 70, 70);
//		Rectangle g5 = new Rectangle(496, 196, 70, 70);
//		Rectangle g6 = new Rectangle(496, 266, 70, 70);
//		Rectangle g7 = new Rectangle(566, 126, 70, 70);
//		Rectangle g8 = new Rectangle(566, 196, 70, 70);
//		Rectangle g9 = new Rectangle(566, 266, 70, 70);
		
		
//		if (g1.contains(released)&&movep1) {
//			x1=426;
//			y1=126;
//			System.out.println("in grid spot 1-- (0,0)");
//		}
	}

	@Override
	public void mouseEntered(MouseEvent e) {

	}

	@Override
	public void mouseExited(MouseEvent e) {

	}


}

