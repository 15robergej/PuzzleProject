import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;


public class PieceComponent extends JComponent implements MouseListener, MouseMotionListener{

	int HEARTS_IN = -1;
	int HEARTS_OUT = 1;
	int CLUBS_IN = -2;
	int CLUBS_OUT = 2;
	int DIAMONDS_IN = -3;
	int DIAMONDS_OUT = 3;
	int SPADES_IN = -4;
	int SPADES_OUT = 4;
	//Maybe use enums although I'm not too sure how they work.


	Piece a = new Piece(CLUBS_OUT, HEARTS_OUT, DIAMONDS_IN, CLUBS_IN);
	Piece b = new Piece(SPADES_OUT, DIAMONDS_OUT, SPADES_IN, HEARTS_IN);
	Piece c = new Piece(HEARTS_OUT, SPADES_OUT, SPADES_IN, CLUBS_IN);
	Piece d = new Piece(HEARTS_OUT, DIAMONDS_OUT, CLUBS_IN, CLUBS_IN);
	Piece e = new Piece(SPADES_OUT, SPADES_OUT, HEARTS_IN, CLUBS_IN);
	Piece f = new Piece(HEARTS_OUT, DIAMONDS_OUT, DIAMONDS_IN, HEARTS_IN);
	Piece g = new Piece(SPADES_OUT, DIAMONDS_OUT, HEARTS_OUT, DIAMONDS_OUT);
	Piece h = new Piece(CLUBS_OUT, HEARTS_OUT, SPADES_IN, HEARTS_IN);
	Piece i = new Piece(CLUBS_OUT, CLUBS_IN, DIAMONDS_IN, DIAMONDS_OUT);

	Piece [] z = {a, b, c, d, e, f, g, h, i};


	private BufferedImage image;
	private BufferedImage image2;
	private BufferedImage image3;
	private BufferedImage image4;
	private BufferedImage image5;
	private BufferedImage image6;
	private BufferedImage image7;
	private BufferedImage image8;
	private BufferedImage image9;


	//	    public PieceComponent() {
	//	       try {                
	//	          image = ImageIO.read(this.getClass().getResource("piece_1.png"));
	//	       } catch (IOException ex) {
	//	    	   System.out.println("image not found");
	//	       }
	//	    }
	//	    @Override
	//	    protected void paintComponent(Graphics g) {
	//	        super.paintComponent(g);
	//	        g.drawImage(image, 0, 0, null);           
	//	    }

	public PieceComponent() {
		addMouseListener(this);
		try {                
			image = ImageIO.read(this.getClass().getResource("piece_1.png"));
			image2 = ImageIO.read(this.getClass().getResource("piece_2.png"));
			image3 = ImageIO.read(this.getClass().getResource("piece_3.png"));
			image4 = ImageIO.read(this.getClass().getResource("piece_4.png"));
			image5 = ImageIO.read(this.getClass().getResource("piece_5.png"));
			image6 = ImageIO.read(this.getClass().getResource("piece_6.png"));
			image7 = ImageIO.read(this.getClass().getResource("piece_7.png"));
			image8 = ImageIO.read(this.getClass().getResource("piece_8.png"));
			image9 = ImageIO.read(this.getClass().getResource("piece_9.png"));
		} catch (IOException ex) {
			System.out.println("image not found");
		}
	}

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.drawImage(image, 0, 20, null);
		g.drawImage(image2, 0, 140, null);
		g.drawImage(image3, 0, 260, null);
		g.drawImage(image4, 0, 380, null);
		g.drawImage(image5, 0, 500, null);
		g.drawImage(image6, 120, 20, null);
		g.drawImage(image7, 120, 140, null);
		g.drawImage(image8, 120, 260, null);
		g.drawImage(image9, 120, 380, null);


		//		AffineTransform at = new AffineTransform();
		//		 //at.translate(image.getWidth()/ 2, image.getHeight()/ 2);
		//		//at.rotate(Math.PI/2);
		//		//at.translate(-image.getWidth()/2, -image.getHeight()/2);
		//		at.rotate(Math.PI/2, image.getWidth() / 2, image.getHeight() / 2);
		//
		//		   //Graphics2D g2d = (Graphics2D) g;
		//		  //g2d.drawImage(image, at, null);
		//
		//		AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
		//		image = op.filter(image, null);
	}


	//	public PieceComponent(int imageNum) {
	//		try {                
	//			image = ImageIO.read(this.getClass().getResource("piece_" + imageNum + ".png"));
	//		} catch (IOException ex) {
	//			System.out.println("image not found");
	//		}
	//	}
	//
	//	@Override
	//	protected void paintComponent(Graphics g) {
	//		super.paintComponent(g);
	//		for(int i=1; i<3; i++){
	//		g.drawImage(image, 0, 120*(i-1), null);
	//		}
	//	}



	//	public void paintComponent(Graphics g){
	//		Graphics2D g2 = (Graphics2D) g;
	//
	//		float[] scales = { 1f, 1f, 1f, 1f };
	//		float[] offsets = new float[4];
	//		RescaleOp rop = new RescaleOp(scales, offsets, null);
	//		
	//		BufferedImage image;{
	//			try {                
	//				for(int imageNumber = 1; imageNumber < 10; imageNumber++){
	//					image = ImageIO.read(new File("src/piece_" + imageNumber + ".png"));
	//					g2.drawImage(image, rop, 50, 30*imageNumber);
	//				}
	//			} catch (IOException ex) {
	//				System.out.println("cannot find image");
	//			}
	//		}
	//		
	//	}






	public static void rotate(Piece piece, int rotations){
		piece.rotate(rotations);
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseClicked(MouseEvent e) {
		Point clicked = e.getPoint();
		Rectangle bounds1 = new Rectangle(0, 20, image.getWidth(), image.getHeight());
		if (bounds1.contains(clicked)) {
			// target image was clicked
			System.out.println("clicked");
			AffineTransform at = new AffineTransform();
			at.rotate(Math.PI/2, image.getWidth() / 2, image.getHeight() / 2);
			AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
			image = op.filter(image, null);
			image.createGraphics().drawImage(image, 0, 0, null);
			this.repaint();
		}
		Rectangle bounds2 = new Rectangle(0, 140, image2.getWidth(), image2.getHeight());
		if (bounds2.contains(clicked)) {
			// target image was clicked
			System.out.println("clicked");
			AffineTransform at = new AffineTransform();
			at.rotate(Math.PI/2, image2.getWidth() / 2, image2.getHeight() / 2);
			AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
			image2 = op.filter(image2, null);
			image2.createGraphics().drawImage(image2, 0, 0, null);
			this.repaint();
		}

	}


	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}


}


