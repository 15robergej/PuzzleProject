import java.util.ArrayList;
import java.util.List;

/**
 * David Chen and Shreya Hegde
 * 
 * Puzzle class
 */
public class Puzzle {
	
	// Private data board and an ArrayList of unused Pieces
	private Board board;
	private ArrayList<Piece> unusedPieces = new ArrayList<>();
	
	// Constructors 
	public Puzzle(int rows, int cols){
		board = new Board(rows, cols);
	}
	public Puzzle(Board board){
		this.board = board;
	}
	public Puzzle(int rows, int cols, ArrayList<Piece> startingPieces){
		this(rows, cols);
		for (Piece p: startingPieces)
			addPiece(p);
	}

	public boolean doesFit(int row, int col, Piece piece){
		boolean pieceNorth = true, pieceEast = true, pieceSouth = true, pieceWest = true;
		
		if (!board.isValid(row, col)) return false;
		
		if (board.isValid(row - 1, col) && board.hasPiece(row - 1, col))
			pieceNorth = matchEdge(piece, board.getPiece(row - 1, col), 0);
		
		if (board.isValid(row, col + 1) && board.hasPiece(row, col + 1))
			pieceEast = matchEdge(piece, board.getPiece(row, col + 1), 1);
		
		if (board.isValid(row + 1, col) && board.hasPiece(row + 1, col))
			pieceSouth = matchEdge(piece, board.getPiece(row + 1, col), 2);
		
		if (board.isValid(row, col - 1) && board.hasPiece(row, col - 1))
			pieceWest = matchEdge(piece, board.getPiece(row, col - 1), 3);
			
		
		return pieceNorth && pieceEast && pieceSouth && pieceWest;
	}
	
	public void restart(){
		for (int i = 0; i < board.getRows(); i++){
			for (int j = 0; j < board.getCols(); j++){
				if (board.hasPiece(i, j)) addPiece(board.getPiece(i, j));
			}
		}
		board = new Board(board.getRows(), board.getCols());
	}
	
	public boolean isSolved(){
		for (int i = 0; i < board.getRows(); i++)
			for (int j = 0; j < board.getCols(); j++){
				if (!board.hasPiece(i,j)) return false;
			}
		return true;
	}

	public void solve(){
		restart();
		solve(0);
		for (int i = unusedPieces.size() - 1; i > 0; i--)
			if (unusedPieces.get(i) == null) unusedPieces.remove(i);
	}
	
	private boolean solve(int depth){
		if (depth == board.getRows()*board.getCols()) return true;
		boolean solved = false;
		int row = depth/getCols();
		int col = depth%getCols();
		for (int i = 0; i < unusedPieces.size() && !solved; i++){
			if (unusedPieces.get(i) != null){
				for (int j = 0; j < 4 && !solved; j++){
					if (doesFit(row, col, unusedPieces.get(i))){
						board.setPiece(row, col, unusedPieces.set(i, null));
						solved = solve(depth + 1);
					}
					if (!solved){
						if (unusedPieces.get(i) == null)
							unusedPieces.set(i, board.removePiece(row, col));
						unusedPieces.get(i).rotate();
					}
				}
			}
		}
		return solved;
	}

	public void addPiece(Piece piece){
		unusedPieces.add(piece);
	}

	public Piece setPiece(int row, int col, Piece piece){
		if (doesFit(row, col, piece)){
			unusedPieces.remove(piece);
			if(board.hasPiece(row, col)){
				unusedPieces.add(board.setPiece(row, col, piece));
				return unusedPieces.get(unusedPieces.size() - 1);
			}
			else board.setPiece(row, col, piece);
		}
		return null;
	}
	public Piece getPiece(int row, int col){
		return board.getPiece(row, col);
	}

	public Piece removePiece(int row, int col){
		if(board.hasPiece(row, col)){
			unusedPieces.add((getPiece(row, col)));
			return board.removePiece(row, col);
		}
		return null;
	}

	public boolean matchEdge(Piece piece1, Piece piece2, int d1to2){
		return (piece1.getEdge(d1to2) + piece2.getEdge((d1to2 + 2)%4) == 0);
	}

	public List<Piece> getUnusedPieces(){
		return unusedPieces.subList(0, unusedPieces.size() - 1);
	}
	
	public int getRows(){
		return board.getRows();
	}
	
	public int getCols(){
		return board.getCols();
	}

	public String toString(){
		return board.toString();
	}

	public static void main(String[] args) {
		Puzzle pzl = new Puzzle(3, 3);
		Piece a = new Piece(Piece.CLUBS_OUT, Piece.HEARTS_OUT, Piece.DIAMONDS_IN, Piece.CLUBS_IN);
		Piece b = new Piece(Piece.SPADES_OUT, Piece.DIAMONDS_OUT, Piece.SPADES_IN, Piece.HEARTS_IN);
		Piece c = new Piece(Piece.HEARTS_OUT, Piece.SPADES_OUT, Piece.SPADES_IN, Piece.CLUBS_IN);
		Piece d = new Piece(Piece.HEARTS_OUT, Piece.DIAMONDS_OUT, Piece.CLUBS_IN, Piece.CLUBS_IN);
		Piece e = new Piece(Piece.SPADES_OUT, Piece.SPADES_OUT, Piece.HEARTS_IN, Piece.CLUBS_IN);
		Piece f = new Piece(Piece.HEARTS_OUT, Piece.DIAMONDS_OUT, Piece.DIAMONDS_IN, Piece.HEARTS_IN);
		Piece g = new Piece(Piece.SPADES_OUT, Piece.DIAMONDS_OUT, Piece.HEARTS_IN, Piece.DIAMONDS_IN);
		Piece h = new Piece(Piece.CLUBS_OUT, Piece.HEARTS_OUT, Piece.SPADES_IN, Piece.HEARTS_IN);
		Piece i = new Piece(Piece.CLUBS_OUT, Piece.CLUBS_IN, Piece.DIAMONDS_IN, Piece.DIAMONDS_OUT);
		pzl.addPiece(a);
		pzl.addPiece(b);
		pzl.addPiece(c);
		pzl.addPiece(d);
		pzl.addPiece(e);
		pzl.addPiece(f);
		pzl.addPiece(g);
		pzl.addPiece(h);
		pzl.addPiece(i);
		pzl.solve();

		System.out.println(pzl);
		
		System.out.println(pzl.getUnusedPieces());
	}
}
