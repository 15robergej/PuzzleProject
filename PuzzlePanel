import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

public class PuzzlePanel extends JPanel implements MouseListener, MouseMotionListener{

	private boolean dragging = false;
	//boolean for whether or not a piece is being moved/dragged

	private boolean [] moveP = {false, false, false, false, false, false, false, false, false};
	
	private boolean [] filled = {false, false, false, false, false, false, false, false, false};

	int HEARTS_IN = -1;
	int HEARTS_OUT = 1;
	int CLUBS_IN = -2;
	int CLUBS_OUT = 2;
	int DIAMONDS_IN = -3;
	int DIAMONDS_OUT = 3;
	int SPADES_IN = -4;
	int SPADES_OUT = 4;

	private Puzzle p = new Puzzle(3, 3);
	
	private PieceComponent[] pieces = new PieceComponent[9];

	private BufferedImage[] images = new BufferedImage[9];

	private Rectangle[] bounds= new Rectangle[9];
	
	private int [] oldX = {0, 0, 0, 0, 0, 120, 120, 120, 120};
	
	private int [] oldY = {0, 120, 240, 360, 480, 20, 140, 260, 380};
	
	private Rectangle g1 = new Rectangle(426, 126, 70, 70);
	private Rectangle g2 = new Rectangle(426, 196, 70, 70);
	private Rectangle g3 = new Rectangle(426, 266, 70, 70);
	private Rectangle g4 = new Rectangle(496, 126, 70, 70);
	private Rectangle g5 = new Rectangle(496, 196, 70, 70);
	private Rectangle g6 = new Rectangle(496, 266, 70, 70);
	private Rectangle g7 = new Rectangle(566, 126, 70, 70);
	private Rectangle g8 = new Rectangle(566, 196, 70, 70);
	private Rectangle g9 = new Rectangle(566, 266, 70, 70);
	private Rectangle box = new Rectangle(426, 126, 210, 210);

	private Rectangle[] grid = {g1, g2, g3, g4, g5, g6, g7, g8, g9};
	
	
	
	public void restart(){
		p.restart();
		
		try {                 
			images[0] = ImageIO.read(this.getClass().getResource("piece_1.png"));
			images[1] = ImageIO.read(this.getClass().getResource("piece_2.png"));
			images[2] = ImageIO.read(this.getClass().getResource("piece_3.png"));
			images[3] = ImageIO.read(this.getClass().getResource("piece_4.png"));
			images[4] = ImageIO.read(this.getClass().getResource("piece_5.png"));
			images[5] = ImageIO.read(this.getClass().getResource("piece_6.png"));
			images[6] = ImageIO.read(this.getClass().getResource("piece_7.png"));
			images[7] = ImageIO.read(this.getClass().getResource("piece_8.png"));
			images[8] = ImageIO.read(this.getClass().getResource("piece_9.png"));
			//						for(int i = 0; i < 9; i++){
			//							images[i] = ImageIO.read(this.getClass().getResource("piece_" + i+1 + ".png"));
			//						}
		} catch (IOException ex) {
			System.out.println("image not found");
		}		
		
		pieces[0] = new PieceComponent(CLUBS_OUT, HEARTS_OUT, DIAMONDS_IN, CLUBS_IN, images[0], 0, 0);
		pieces[1] = new PieceComponent(SPADES_OUT, DIAMONDS_OUT, SPADES_IN, HEARTS_IN, images[1], 0, 120);
		pieces[2] = new PieceComponent(HEARTS_OUT, SPADES_OUT, SPADES_IN, CLUBS_IN, images[2], 0, 240);
		pieces[3] = new PieceComponent(HEARTS_OUT, DIAMONDS_OUT, CLUBS_IN, CLUBS_IN, images[3], 0, 360);
		pieces[4] = new PieceComponent(SPADES_OUT, SPADES_OUT, HEARTS_IN, CLUBS_IN, images[4], 0, 480);
		pieces[5] = new PieceComponent(HEARTS_OUT, DIAMONDS_OUT, DIAMONDS_IN, HEARTS_IN, images[5], 120, 20);
		pieces[6] = new PieceComponent(SPADES_OUT, DIAMONDS_OUT, HEARTS_OUT, DIAMONDS_OUT, images[6], 120, 140);
		pieces[7] = new PieceComponent(CLUBS_OUT, HEARTS_OUT, SPADES_IN, HEARTS_IN, images[7], 120, 260);
		pieces[8] = new PieceComponent(CLUBS_OUT, CLUBS_IN, DIAMONDS_IN, DIAMONDS_OUT, images[8], 120, 380);
		
		for(int i = 0; i < 9; i ++){
			filled[i] = false;
		}
		
		this.repaint();
	}
	
	public void solve(){
		p.solve();
	}


	public PuzzlePanel() {
		addMouseListener(this);
		addMouseMotionListener(this);
		restart();
	}



	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		for(int i = 0; i < 9; i++){
			g.drawImage(images[i], pieces[i].getX(), pieces[i].getY(), null);
		}

		Graphics2D g2 = (Graphics2D) g;
		//MAKES THE GRID 100 by 100 px.
		for (int y = 150; y <= 360; y += 70){
			Line2D.Double segment = new Line2D.Double(450, y, 660, y);
			g2.draw(segment);
		}
		for (int x = 450; x <= 660; x += 70){
			Line2D.Double segment2 = new Line2D.Double(x, 150, x, 360);
			g2.draw(segment2);
		}
		
		
	}

//	public void rotatePiece(PieceComponent p){
//		p.rotate();
////		AffineTransform at = new AffineTransform();
////		at.rotate(Math.PI/2, p.getWidth() / 2, p.getHeight() / 2);
////		AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
////		p.setImage(op.filter(p.getImage(), null));
////		p.getImage().createGraphics().drawImage(p.getImage(), 0, 0, null);
//		
//		this.repaint();
//	}

	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseClicked(MouseEvent e) {
		Point clicked = e.getPoint();
		for(int i = 0; i < 9; i++){
			bounds[i] = new Rectangle(pieces[i].getX() + 25, pieces[i].getY() + 25, images[i].getWidth() - 50, images[i].getHeight() - 50);
		}

		for(int i = 0; i < 9; i++){
			if(bounds[i].contains(clicked)){
				System.out.println("p" + i + " clicked");
			AffineTransform at = new AffineTransform();
			at.rotate(Math.PI/2, images[i].getWidth() / 2, images[i].getHeight() / 2);
			AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
			images[i]= op.filter(images[i], null);
			images[i].createGraphics().drawImage(images[i], 0, 0, null);
			this.repaint();
		//	rotatePiece(pieces[i]);
			}
		}

	}
	


	@Override
	public void mousePressed(MouseEvent e) {
		Point pressed = e.getPoint();
//IMAGE WIDTH & HEIGHT ARE BOTH 118px.
		for(int i = 0; i < 9; i++){
			bounds[i] = new Rectangle(pieces[i].getX() + 25, pieces[i].getY() + 25, images[i].getWidth() - 50, images[i].getHeight() - 50);
		}

		for(int i = 0; i < 9; i++){
			if(bounds[i].contains(pressed)){
				dragging = true;
				moveP[i] = true;
			}
			
		}

		System.out.println("mousePressed at " + pressed);

	}

	@Override
	public void mouseDragged(MouseEvent e) {
		Point drag = e.getPoint();

		if (dragging) {
			for(int i = 0; i < 9; i ++){
				if(moveP[i]){
					pieces[i].setX(drag.x - images[i].getWidth()/2);
					pieces[i].setY(drag.y - images[i].getHeight()/2);
				}
				if(grid[i].contains(drag)){
					filled[i] = false;
				}
			}
			this.repaint();
		}
	}

	@Override
	public void mouseReleased(MouseEvent e) {

		dragging = false;

		Point released = e.getPoint();
		
			
//			pieces[0] = new PieceComponent(CLUBS_OUT, HEARTS_OUT, DIAMONDS_IN, CLUBS_IN, images[0], 0, 0);
//			pieces[1] = new PieceComponent(SPADES_OUT, DIAMONDS_OUT, SPADES_IN, HEARTS_IN, images[1], 0, 120);
//			pieces[2] = new PieceComponent(HEARTS_OUT, SPADES_OUT, SPADES_IN, CLUBS_IN, images[2], 0, 240);
//			pieces[3] = new PieceComponent(HEARTS_OUT, DIAMONDS_OUT, CLUBS_IN, CLUBS_IN, images[3], 0, 360);
//			pieces[4] = new PieceComponent(SPADES_OUT, SPADES_OUT, HEARTS_IN, CLUBS_IN, images[4], 0, 480);
//			pieces[5] = new PieceComponent(HEARTS_OUT, DIAMONDS_OUT, DIAMONDS_IN, HEARTS_IN, images[5], 120, 20);
//			pieces[6] = new PieceComponent(SPADES_OUT, DIAMONDS_OUT, HEARTS_OUT, DIAMONDS_OUT, images[6], 120, 140);
//			pieces[7] = new PieceComponent(CLUBS_OUT, HEARTS_OUT, SPADES_IN, HEARTS_IN, images[7], 120, 260);
//			pieces[8] = new PieceComponent(CLUBS_OUT, CLUBS_IN, DIAMONDS_IN, DIAMONDS_OUT, images[8], 120, 380);


	

		//if dropped in the grid, allow piece to stay
		//otherwise send piece back to default position (<--maybe??)
		
		
		

		for(int i = 0; i < 9; i ++){
			for(int j = 0; j < 9; j++){
				if(grid[i].contains(released) && moveP[j] && filled[i] == false){
					pieces[j].setX((int)grid[i].getX());
					pieces[j].setY((int)grid[i].getY());
					filled[i] = true;
					System.out.println("IN GRID");
				}
				else if(!box.contains(released) && moveP[j] && filled[i] == true){
					pieces[j].setX(oldX[j]);
					pieces[j].setY(oldY[j]);
					filled[i] = false;
					System.out.println("Already Filled");
				}
				else if(!box.contains(released) && moveP[j]){
					pieces[j].setX(oldX[j]);
					pieces[j].setY(oldY[j]);
					System.out.println("Not in box");
				}
//				if(grid[i].contains(pressed) && filled[i] == true){
//					filled[i] = false;
//				}
			}
		}
		//
		//		if (g1.contains(released)&&movep1) {
		//			x1=426;
		//			y1=126;
		//			System.out.println("in grid spot 1-- (0,0)");
		//		}
		//		else if (g2.contains(released)&&movep1) {
		//			x1=426;
		//			y1=196;
		//			//System.out.println("in grid spot 2-- (0,1)");
		//		}
		//		else{
		//			//move back to default spot???????
		//			
		//		}
		this.repaint();

		for(int i = 0; i < 9; i++){
			moveP[i] = false;
		}


		//		
		//		for(int i=0; i<3; i++){
		//			for(int j=0; j<0; j++){
		//				if(p.doesFit(i,j,p1)){
		//					p.setPiece(0,0,p1);
		//					//allow image to be put down in spot in grid
		//				}
		//			}
		//		}

	}



	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}
}
