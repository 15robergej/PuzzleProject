import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

public class PuzzlePanel extends JPanel implements MouseListener, MouseMotionListener{

	//private data
	private boolean dragging = false;
	//boolean for whether or not a piece is being moved/dragged

	private boolean [] moveP = {false, false, false, false, false, false, false, false, false};

	private boolean [] filled = {false, false, false, false, false, false, false, false, false};

	int HEARTS_IN = -1;
	int HEARTS_OUT = 1;
	int CLUBS_IN = -2;
	int CLUBS_OUT = 2;
	int DIAMONDS_IN = -3;
	int DIAMONDS_OUT = 3;
	int SPADES_IN = -4;
	int SPADES_OUT = 4;
	private Puzzle p;
	//	private Puzzle p = new Puzzle(3,3);

	private PieceComponent[] pieces = new PieceComponent[9];
	ArrayList<Piece> a ;
	private BufferedImage[] images = new BufferedImage[9];

	private Rectangle[] bounds= new Rectangle[9];

	private int [] oldX = {0, 0, 0, 0, 0, 120, 120, 120, 120};

	private int [] oldY = {0, 120, 240, 360, 480, 20, 140, 260, 380};

	//private data corresponding to each square on the grid
	private Rectangle g1 = new Rectangle(450, 150, 70, 70);
	private Rectangle g2 = new Rectangle(450, 220, 70, 70);
	private Rectangle g3 = new Rectangle(450, 290, 70, 70);
	private Rectangle g4 = new Rectangle(520, 150, 70, 70);
	private Rectangle g5 = new Rectangle(520, 220, 70, 70);
	private Rectangle g6 = new Rectangle(520, 290, 70, 70);
	private Rectangle g7 = new Rectangle(590, 150, 70, 70);
	private Rectangle g8 = new Rectangle(590, 220, 70, 70);
	private Rectangle g9 = new Rectangle(590, 290, 70, 70);
	private Rectangle box = new Rectangle(450, 150, 210, 210);

	private Rectangle[] grid = {g1, g2, g3, g4, g5, g6, g7, g8, g9};

	private int[] gRow={0,1,2,0,1,2,0,1,2};
	private int[] gCol={0,0,0,1,1,1,2,2,2};


	//method that determines if two pieces are equal to each other by comparing 
	//all four of the piece edges
	public static boolean doesEqual(Piece a, Piece b)
	{
		for(int i = 0; i < 4; i++)
		{
			if(a.edges[i] != b.edges[i]) return false;	

		}

		return true;
	}


	//restart method returns the board to its empty state and clears the puzzle
		//and repaints it
	public void restart(){
		p.restart();

		try {                 
			images[0] = ImageIO.read(this.getClass().getResource("piece_1.png"));
			images[1] = ImageIO.read(this.getClass().getResource("piece_2.png"));
			images[2] = ImageIO.read(this.getClass().getResource("piece_3.png"));
			images[3] = ImageIO.read(this.getClass().getResource("piece_4.png"));
			images[4] = ImageIO.read(this.getClass().getResource("piece_5.png"));
			images[5] = ImageIO.read(this.getClass().getResource("piece_6.png"));
			images[6] = ImageIO.read(this.getClass().getResource("piece_7.png"));
			images[7] = ImageIO.read(this.getClass().getResource("piece_8.png"));
			images[8] = ImageIO.read(this.getClass().getResource("piece_9.png"));

		} catch (IOException ex) {
			System.out.println("image not found");
		}		

		pieces[0] = new PieceComponent(CLUBS_OUT, HEARTS_OUT, DIAMONDS_IN, CLUBS_IN, images[0], 0, 0);
		pieces[1] = new PieceComponent(SPADES_OUT, DIAMONDS_OUT, SPADES_IN, HEARTS_IN, images[1], 0, 120);
		pieces[2] = new PieceComponent(HEARTS_OUT, SPADES_OUT, SPADES_IN, CLUBS_IN, images[2], 0, 240);
		pieces[3] = new PieceComponent(HEARTS_OUT, DIAMONDS_OUT, CLUBS_IN, CLUBS_IN, images[3], 0, 360);
		pieces[4] = new PieceComponent(SPADES_OUT, SPADES_OUT, HEARTS_IN, CLUBS_IN, images[4], 0, 480);
		pieces[5] = new PieceComponent(HEARTS_OUT, DIAMONDS_OUT, DIAMONDS_IN, HEARTS_IN, images[5], 120, 20);
		pieces[6] = new PieceComponent(SPADES_OUT, DIAMONDS_OUT, HEARTS_IN, DIAMONDS_IN, images[6], 120, 140);
		pieces[7] = new PieceComponent(CLUBS_OUT, HEARTS_OUT, SPADES_IN, HEARTS_IN, images[7], 120, 260);
		pieces[8] = new PieceComponent(CLUBS_OUT, CLUBS_IN, DIAMONDS_IN, DIAMONDS_OUT, images[8], 120, 380);

		for(int i = 0; i < 9; i ++){
			filled[i] = false;
		}
		this.repaint();
	}

	//method which solves the puzzle and displays the solved solution
	//on to the grid 
	public void solve(){

		p.solve();

		for(int col = 0; col < 3; col++){
			for(int row = 0; row<3; row++){

				for(int k = 0; k<9; k++){
					if(doesEqual(a.get(k), p.getBoard().getPiece(row, col))){
						//int rotations = countRots(a.get(k), p.getBoard().getPiece(row, col));
						//					if(doesEqual(pieces[k].getPiece(), p.getBoard().getPiece(row, col))){

						int l=0;
						if(col==0){
							if(row==1) l = 1;
							else if(row==2) l = 2;	
						}
						else if(col==1){
							if(row==0) l = 3;
							else if(row==1) l = 4;
							else if(row==2) l = 5;

						}
						else if(col==2){
							if(row==0) l = 6;
							else if(row==1) l = 7;
							else if(row==2) l = 8;

						}
						//pieces[k].rotate(rotations);
						pieces[k].setX((int)grid[l].getX()-24);
						pieces[k].setY((int)grid[l].getY()-24);

						if (pieces[k].getPiece().getOrientation()==1){
							AffineTransform at = new AffineTransform();
							at.rotate(Math.PI/2, images[k].getWidth() / 2, images[k].getHeight() / 2);
							AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
							images[k]= op.filter(images[k], null);
							images[k].createGraphics().drawImage(images[k], 0, 0, null);
						}
						else if (pieces[k].getPiece().getOrientation()==2){
							AffineTransform at = new AffineTransform();
							at.rotate(Math.PI, images[k].getWidth() / 2, images[k].getHeight() / 2);
							AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
							images[k]= op.filter(images[k], null);
							images[k].createGraphics().drawImage(images[k], 0, 0, null);
						}
						else if (pieces[k].getPiece().getOrientation()==3){
							AffineTransform at = new AffineTransform();
							at.rotate(-Math.PI/2, images[k].getWidth() / 2, images[k].getHeight() / 2);
							AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
							images[k]= op.filter(images[k], null);
							images[k].createGraphics().drawImage(images[k], 0, 0, null);
						}


					}
				}
			}
		}

		for(int i = 0; i < 9; i ++){
			filled[i] = true;
		}

		this.repaint();
	}


	//default constructor which creates a PuzzlePanel object
	public PuzzlePanel() {
		try {                 
			images[0] = ImageIO.read(this.getClass().getResource("piece_1.png"));
			images[1] = ImageIO.read(this.getClass().getResource("piece_2.png"));
			images[2] = ImageIO.read(this.getClass().getResource("piece_3.png"));
			images[3] = ImageIO.read(this.getClass().getResource("piece_4.png"));
			images[4] = ImageIO.read(this.getClass().getResource("piece_5.png"));
			images[5] = ImageIO.read(this.getClass().getResource("piece_6.png"));
			images[6] = ImageIO.read(this.getClass().getResource("piece_7.png"));
			images[7] = ImageIO.read(this.getClass().getResource("piece_8.png"));
			images[8] = ImageIO.read(this.getClass().getResource("piece_9.png"));

		} catch (IOException ex) {
			System.out.println("image not found");
		}		

		pieces[0] = new PieceComponent(CLUBS_OUT, HEARTS_OUT, DIAMONDS_IN, CLUBS_IN, images[0], 0, 0);
		pieces[1] = new PieceComponent(SPADES_OUT, DIAMONDS_OUT, SPADES_IN, HEARTS_IN, images[1], 0, 120);
		pieces[2] = new PieceComponent(HEARTS_OUT, SPADES_OUT, SPADES_IN, CLUBS_IN, images[2], 0, 240);
		pieces[3] = new PieceComponent(HEARTS_OUT, DIAMONDS_OUT, CLUBS_IN, CLUBS_IN, images[3], 0, 360);
		pieces[4] = new PieceComponent(SPADES_OUT, SPADES_OUT, HEARTS_IN, CLUBS_IN, images[4], 0, 480);
		pieces[5] = new PieceComponent(HEARTS_OUT, DIAMONDS_OUT, DIAMONDS_IN, HEARTS_IN, images[5], 120, 20);
		pieces[6] = new PieceComponent(SPADES_OUT, DIAMONDS_OUT, HEARTS_IN, DIAMONDS_IN, images[6], 120, 140);
		pieces[7] = new PieceComponent(CLUBS_OUT, HEARTS_OUT, SPADES_IN, HEARTS_IN, images[7], 120, 260);
		pieces[8] = new PieceComponent(CLUBS_OUT, CLUBS_IN, DIAMONDS_IN, DIAMONDS_OUT, images[8], 120, 380);

		for(int i = 0; i < 9; i ++){
			filled[i] = false;
		}
		a= new ArrayList<Piece>(pieces.length);

		for(int i=0; i<pieces.length; i++){
			a.add(pieces[i].getPiece());
		}


		p = new Puzzle(3, 3, a);
		addMouseListener(this);
		addMouseMotionListener(this);

	}



	//paintComponent method to draw the grid and 
	//places the piece images on to the frame
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		for(int i = 0; i < 9; i++){
			g.drawImage(images[i], pieces[i].getX(), pieces[i].getY(), null);
		}

		Graphics2D g2 = (Graphics2D) g;

		for(int i = 0; i < 9; i ++){
			g2.setColor(Color.BLUE);
			g2.draw(grid[i]);
		}


		//MAKES THE GRID 100 by 100 px.
		for (int y = 150; y <= 360; y += 70){
			g2.setColor(Color.BLACK);
			Line2D.Double segment = new Line2D.Double(450, y, 660, y);
			g2.draw(segment);
		}
		for (int x = 450; x <= 660; x += 70){
			Line2D.Double segment2 = new Line2D.Double(x, 150, x, 360);
			g2.draw(segment2);
		}	

	}


	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	//if the mouse is clicked, the method rotates the pieceComponent 90 degrees clockwise
	public void mouseClicked(MouseEvent e) {
		Point clicked = e.getPoint();
		for(int i = 0; i < 9; i++){
			bounds[i] = new Rectangle(pieces[i].getX() + 25, pieces[i].getY() + 25, images[i].getWidth() - 50, images[i].getHeight() - 50);
		}

		for(int i = 0; i < 9; i++){
			if(bounds[i].contains(clicked)&&!box.contains(clicked)){
				System.out.println("p" + i + " clicked and rotated");
				AffineTransform at = new AffineTransform();
				at.rotate(Math.PI/2, images[i].getWidth() / 2, images[i].getHeight() / 2);
				AffineTransformOp op = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
				images[i]= op.filter(images[i], null);
				images[i].createGraphics().drawImage(images[i], 0, 0, null);
				this.repaint();
				pieces[i].rotate();
			}
		}

	}


	@Override
	public void mousePressed(MouseEvent e) {
		Point pressed = e.getPoint();
		//IMAGE WIDTH & HEIGHT ARE BOTH 118px.
		for(int i = 0; i < 9; i++){
			bounds[i] = new Rectangle(pieces[i].getX() + 25, pieces[i].getY() + 25, images[i].getWidth() - 50, images[i].getHeight() - 50);
		}

		for(int i = 0; i < 9; i++){
			if(bounds[i].contains(pressed)){
				dragging = true;
				moveP[i] = true;
			}
			if(grid[i].contains(pressed)){
				filled[i] = false;
				p.removePiece(gRow[i], gCol[i]);

			}
		}

		//	System.out.println("mousePressed at " + pressed);

	}

	@Override
	//method that allows a certain pieceComponent to be dragged to a spot on the grid
	public void mouseDragged(MouseEvent e) {
		Point drag = e.getPoint();

		if (dragging) {
			for(int i = 0; i < 9; i ++){
				if(moveP[i]){
					pieces[i].setX(drag.x - images[i].getWidth()/2);
					pieces[i].setY(drag.y - images[i].getHeight()/2);
					//System.out.print(drag.x - images[i].getWidth()/2);
				}

			}
			this.repaint();

		}

	}

	@Override
	//allows a Piece to stay in a certain spot if it is dropped on to the grid
	//Sends the Piece back to its original location if not. 
	public void mouseReleased(MouseEvent e) {

		dragging = false;

		Point released = e.getPoint();

		//if dropped in the grid, allow piece to stay
		//otherwise send piece back to default position (<--maybe??)


		for(int i = 0; i < 9; i ++){
			for(int j = 0; j < 9; j++){
				if(moveP[j]){
					if(grid[i].contains(released) && filled[i] == false && p.doesFit(gRow[i], gCol[i], pieces[j].getPiece())){
						pieces[j].setX((int)grid[i].getX() - 23);
						pieces[j].setY((int)grid[i].getY() - 23);
						filled[i] = true;
						p.setPiece(gRow[i], gCol[i], pieces[j].getPiece());
						System.out.println("IN GRID");
					}
					//					else if(!box.contains(released)){
					//						pieces[j].setX(oldX[j]);
					//						pieces[j].setY(oldY[j]);
					//						System.out.println("not in box");
					//					}
					//					else if(grid[i].contains(released) && filled[i] == true){
					//						pieces[j].setX(oldX[j]);
					//						pieces[j].setY(oldY[j]);
					//						System.out.println("already filled");
					//					}
					//					else if(grid[i].contains(released) && !p.doesFit(gRow[i], gCol[i], pieces[j].getPiece())){
					//						pieces[j].setX(oldX[j]);
					//						pieces[j].setY(oldY[j]);
					//						System.out.println("piece doesn't fit");
					//						System.out.println("row-"+ gRow[i]);
					//						System.out.println("col-"+ gCol[i]);
					//					}
					else if(!box.contains(released) || grid[i].contains(released) && (filled[i] == true || !p.doesFit(gRow[i], gCol[i], pieces[j].getPiece()))){
						pieces[j].setX(oldX[j]);
						pieces[j].setY(oldY[j]);
						System.out.println("piece doesn't fit/not in box/already filled");
					}
				}
			}
		}

		this.repaint();

		for(int i = 0; i < 9; i++){
			moveP[i] = false;
		}



	}



	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}
}
